name: autofix.ci
on:
  pull_request:
  push:
    branches: [main]
permissions:
  contents: read

jobs:
  autofix:
    if: contains(github.event.head_commit.message, 'deploy') == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup PNPM
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0

      - name: Setup Node
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: 24.11.0
          cache: "pnpm"

      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.14.0"

      - name: Install Dependencies
        run: pnpm i

      - name: Run prettier
        run: pnpm exec prettier . --write

      # Optimize all PNGs with https://pngquant.org/
      - run: sudo apt-get update && sudo apt-get install -y pngquant
      - name: Run pngquant
        run: |
          shopt -s globstar
          find . -name '*.png' -exec pngquant --ext .png --force 256 {} \;

      - name: Sort Files
        run: |
          import json

          def sort_files_by_target_path(files):
              def sort_key(file_obj):
                  target_path = file_obj.get("targetPath", "").lower()
                  segments = target_path.split('/')

                  key = []
                  for idx, segment in enumerate(segments):
                      # A file is the final segment with no further sub-paths
                      is_file = idx == len(segments) - 1 and '.' in segment
                      key.append((segment, is_file))

                  return key

              return sorted(files, key=sort_key)

          input_file = "repos.json"

          with open(input_file, "r") as f:
              data = json.load(f)

          if "repositories" not in data:
              print(f"Error: {input_file} does not contain a 'repositories' key.")
              exit(1)

          for repo in data["repositories"]:
              if "files" in repo:
                  repo["files"] = sort_files_by_target_path(repo["files"])

          with open(input_file, "w") as f:
              json.dump(data, f, indent=2)
              f.write("\n")

        shell: python

      - uses: autofix-ci/action@635ffb0c9798bd160680f18fd73371e355b85f27
