name: Update Template Files Across Repos

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: template-files

jobs:
  changesets:
    name: Changesets
    runs-on: ubuntu-latest
    outputs:
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm i

      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        with:
          commit: "[ci] release"
          title: "[ci] release"
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_GITHUB_TOKEN }}

  prepare-matrix:
    name: Prepare Matrix
    runs-on: ubuntu-latest
    outputs:
      repo-matrix: ${{ env.REPO_MATRIX }}
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Read Repositories from JSON
        id: set-matrix
        run: |
          repos=$(jq -c '.repositories[] | {name: .name, files: .files}' repos.json | jq -s .)
          {
            echo "REPO_MATRIX<<EOF"
            echo ${repos}
            echo EOF
          } >> $GITHUB_ENV

      - name: Print Matrix
        run: echo "${{ env.REPO_MATRIX }}"

  sync:
    runs-on: ubuntu-latest
    needs: [changesets, prepare-matrix]
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJson(needs.prepare-matrix.outputs.repo-matrix) }}
    if: >
      (
        needs.changesets.outputs.hasChangesets == 'false' && 
        (
          contains(github.event.head_commit.message, 'deploy') || 
          contains(github.event.head_commit.message, '[ci] release')
        )
      ) || 
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install jq, sort-package-json and markdown-replace-section
        run: |
          sudo apt-get install -y jq
          npm install -g sort-package-json
          npm install -g markdown-replace-section

      - name: Ensure "ðŸ¤– bot" label exists
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_GITHUB_TOKEN }}
        run: |
          # Check if label exists in target repository, create if not
          if ! gh label list -R "${{ matrix.repo.name }}" | grep -q "ðŸ¤– bot"; then
            gh label create "ðŸ¤– bot" \
              --description "Automatically generated pull request" \
              --color "0075ca" \
              -R "${{ matrix.repo.name }}"
          fi

      - name: Update template files in target repository
        env:
          GH_TOKEN: ${{ secrets.PUBLIC_GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          repo_name="${{ matrix.repo.name }}"
          files='${{ toJson(matrix.repo.files) }}'

          echo "Processing repository: $repo_name"
            
          # Clone the target repository
          echo "Cloning repository $repo_name..."
          git clone --depth 1 "https://x-access-token:${GH_TOKEN}@github.com/${repo_name}.git" target-repo
          cd target-repo

          # Create or switch to the branch
          branch_name="update-template-files"
          echo "Creating branch $branch_name..."
          git checkout -b "$branch_name" || git checkout "$branch_name"

          declare -a modified_package_jsons=()

          # Sync specified template files
          for file_config in $(echo "$files" | jq -c '.[]'); do
            src_file_raw=$(echo "$file_config" | jq -r '.path')
            dest_file=$(echo "$file_config" | jq -r '.targetPath')
            special=$(echo "$file_config" | jq -r '.special // empty')
            
            echo "Processing file: $src_file_raw -> $dest_file"  

            # Detect if src_file is a URL or relative path
            if [[ "$src_file_raw" =~ ^https?:// ]]; then
              echo "$src_file is a URL. Downloading it..."
              temp_file=$(mktemp)
              if ! curl -sSL "$src_file_raw" -o "$temp_file"; then
                echo "Error: Failed to download $src_file. Skipping..."
                continue
              fi
              src_file="$temp_file"
            else
              echo "$src_file_raw is a relative path. Prefixing with '../'."
              src_file="../$src_file_raw"

              # Check if the file exists (only for local files)
              if [ ! -f "$src_file" ]; then
                echo "Warning: File $src_file not found in /template-files."
                continue
              fi
            fi

            if [ "$special" == "README.md" ]; then
              echo "Special handling for README.md"

              # Combine existing README.md with the License section
              if [ -f "$dest_file" ]; then
                # Create a temporary file to store the combined content
                echo "Combining existing README.md with the License section..."
                awk '/## License/,EOF' "$src_file" | tail -n +2 > license_content.md
                markdown-replace-section "$dest_file" "License" "$dest_file" < license_content.md
                rm -f license_content.md
              else
                # If no existing README.md, copy the template and add the License section
                echo "No existing README.md found. Creating a new one..."
                cp "$src_file" "$dest_file"
              fi
            elif [ "$special" == "package.json" ]; then
              echo "Special handling for package.json"

              # Prepare the destination directory
              mkdir -p "$(dirname "$dest_file")"

              # Handle dynamic content replacement if "props" is specified
              props=$(echo "$file_config" | jq -c '.props // empty')
              if [ -n "$props" ]; then
                echo "Applying dynamic replacements for $src_file..."
                temp_file=$(mktemp)
                cp "$src_file" "$temp_file"

                # Replace placeholders with their respective values from props
                for key in $(echo "$props" | jq -r 'keys[]'); do
                  value=$(echo "$props" | jq -r --arg key "$key" '.[$key]')
                  placeholder="<%= $key %>"
                  echo "Replacing $placeholder with $value in $src_file..."
                  sed -i "s|$placeholder|$value|g" "$temp_file"
                done

                temp_file_2=$(mktemp)
                jq -s 'reduce .[] as $item ({}; . * $item)' "$dest_file" "$temp_file" > "$temp_file_2"

                # Move the processed file to the target location
                mv "$temp_file_2" "$dest_file"
                rm -f "$temp_file"
              else
                if [ -f "$dest_file" ]; then
                  # If the destination file exists, merge it with the source file
                  echo "Destination file $dest_file exists. Merging $src_file into $dest_file..."
                  temp_file=$(mktemp)
                  jq -s 'reduce .[] as $item ({}; . * $item)' "$dest_file" "$src_file" > "$temp_file"
                  mv "$temp_file" "$dest_file"
                else
                  # If the destination file does not exist, just copy the source file
                  echo "Destination file $dest_file does not exist. Copying $src_file to $dest_file..."
                  cp "$src_file" "$dest_file"
                fi
              fi

              modified_package_jsons+=("$dest_file")
            else
              # Prepare the destination directory
              mkdir -p "$(dirname "$dest_file")"

              # Handle dynamic content replacement if "props" is specified
              props=$(echo "$file_config" | jq -c '.props // empty')
              if [ -n "$props" ]; then
                echo "Applying dynamic replacements for $src_file..."
                temp_file=$(mktemp)
                cp "$src_file" "$temp_file"

                # Replace placeholders with their respective values from props
                for key in $(echo "$props" | jq -r 'keys[]'); do
                  value=$(echo "$props" | jq -r --arg key "$key" '.[$key]')
                  placeholder="<%= $key %>"
                  echo "Replacing $placeholder with $value in $src_file..."
                  sed -i "s|$placeholder|$value|g" "$temp_file"
                done

                # Move the processed file to the target location
                mv "$temp_file" "$dest_file"
              else
                # If no props, copy the file directly
                cp "$src_file" "$dest_file"
              fi
            fi

            if [[ "$src_file_raw" =~ ^https?:// ]]; then
              echo "Cleaning up temporary file..."
              rm -f "$src_file"
            fi
          done

          if [ ${#modified_package_jsons[@]} -gt 0 ]; then
            echo "Sorting modified package.json files..."
            for package_json in "${modified_package_jsons[@]}"; do
              echo "Sorting $package_json"
              sort-package-json "$package_json"
            done
          fi

          # Commit and push changes if any
          echo "Checking for changes..."
          git add .

          # Count the number of staged files
          changed_count=$(git diff --cached --name-only | wc -l)
          echo "Number of changed files: $changed_count"

          # Save the count to a GitHub environment variable for later steps
          echo "CHANGED_FILES=$changed_count" >> $GITHUB_ENV

          if git diff --cached --quiet; then
            echo "No changes detected for $repo_name."

            echo "Checking for an open PR for branch $branch_name..."
            existing_pr=$(gh pr list --base main --head "$branch_name" --json number --jq '.[0].number')

            if [ -n "$existing_pr" ]; then
              echo "Found existing PR #$existing_pr. Closing it..."
              gh pr comment "$existing_pr" -b "The branch has been updated. No changes detected for $repo_name."
              gh pr close "$existing_pr"
            fi
          else
            echo "Committing and pushing changes for $repo_name..."
            git commit -m "Update GitHub template files"
            git push --force origin "$branch_name"

            cd ..
            
            latest_commit_hash=$(git rev-parse HEAD)
            latest_commit_url="https://github.com/$GITHUB_REPOSITORY/commit/$latest_commit_hash"
            latest_commit_message=$(git log -1 --pretty=%s)
            latest_commit_entry="- $latest_commit_message - ([$(git rev-parse --short HEAD)]($latest_commit_url))"

            cd target-repo

            # Check for existing pull request
            echo "Checking for an open PR for branch $branch_name..."
            existing_pr=$(gh pr list --base main --head "$branch_name" --json number --jq '.[0].number')

            if [ -n "$existing_pr" ]; then
              echo "Found existing PR #$existing_pr. Updating it..."
              current_body=$(gh pr view "$existing_pr" --json body --jq '.body')
              updated_body=$(printf "%s\n%s" "$current_body" "$latest_commit_entry")
              gh pr edit "$existing_pr" --body "$updated_body"
              gh pr comment "$existing_pr" --body "The branch has been updated with the [latest changes]($latest_commit_url)."
            else
              echo "No existing PR found. Creating a new one..."
              description=$(printf "%s\n\n%s\n%s" "This PR syncs the specified GitHub template files from the [central repository](https://github.com/trueberryless-org/template-files)." "### Changes:" "$latest_commit_entry")
              gh pr create \
                --base main \
                --head "$branch_name" \
                --title "[ci] sync template files" \
                --body "$description" \
                --label "ðŸ¤– bot"
            fi
          fi

          # Cleanup
          cd ..
          echo "Cleaning up repository clone for $repo_name..."
          rm -rf target-repo

      - name: Append summary for repository
        if: success()
        env:
          GH_TOKEN: ${{ secrets.PUBLIC_GITHUB_TOKEN }}
        run: |
          repo_name="${{ matrix.repo.name }}"
          branch_name="update-template-files"
          pr_url="https://github.com/${repo_name}/pull/$(gh pr list --repo "$repo_name" --base main --head "$branch_name" --json number --jq '.[0].number')"
          changed_files="${{ env.CHANGED_FILES }}"

          mkdir -p "summary"
          mkdir -p "discord"

          if [ "$changed_files" -gt 0 ]; then
            echo "| $repo_name | [PR Link]($pr_url) | $changed_files |" >> summary/summary_table.txt
            if [ "$changed_files" -eq 1 ]; then
              echo "- $repo_name -- $changed_files file changed: ([PR Link]($pr_url))" >> discord/discord_list.txt
            else
              echo "- $repo_name -- $changed_files files changed: ([PR Link]($pr_url))" >> discord/discord_list.txt
            fi
          else
            echo "| $repo_name | No PR | $changed_files |" >> summary/summary_table.txt
            echo "- $repo_name -- No files changed" >> discord/discord_list.txt
          fi

      - name: Replace "/" with "-" in repo name for artifact upload
        run: |
          repo_name="${{ matrix.repo.name }}"
          sanitized_repo_name="${repo_name//\//-}"
          echo "Sanitized repo name: $sanitized_repo_name"
          echo "SANITIZED_REPO_NAME=$sanitized_repo_name" >> $GITHUB_ENV

      - name: Upload summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: summary-table-${{ env.SANITIZED_REPO_NAME }}
          path: summary/summary_table.txt

      - name: Upload summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: discord-list-${{ env.SANITIZED_REPO_NAME }}
          path: discord/discord_list.txt

  summarize:
    name: Synchronization Report
    runs-on: ubuntu-latest
    needs: sync
    steps:
      - uses: actions/checkout@v4

      - name: Download summary artifacts
        uses: actions/download-artifact@v4

      - name: Combine summaries and generate final markdown table
        run: |
          # Create or append to the final summary file
          echo "### Summary of Changes" > final_summary.md
          echo "" >> final_summary.md
          echo "| Repository | PR Link | Files Changed |" >> final_summary.md
          echo "|------------|---------|---------------|" >> final_summary.md

          # Loop over the downloaded summary artifacts and append their content
          for artifact in $(find . -name "summary_table.txt"); do
            cat "$artifact" >> final_summary.md
          done

      - name: Upload final summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-summary
          path: final_summary.md

      - name: Combine discord and generate final markdown list
        run: |
          # Create or append to the final summary file
          echo "### Summary of Changes" > discord_summary.md
          echo "" >> discord_summary.md

          # Loop over the downloaded summary artifacts and append their content
          for artifact in $(find . -name "discord_list.txt"); do
            cat "$artifact" >> discord_summary.md
          done

      - name: Upload final summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: discord-summary
          path: discord_summary.md

      - name: Display summary in the GitHub Actions summary
        run: |
          if [ -f final_summary.md ]; then
            cat final_summary.md >> $GITHUB_STEP_SUMMARY
          else
            echo "No data collected" >> $GITHUB_STEP_SUMMARY
          fi

  image-tag:
    name: Image Tag
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ env.IMAGE_TAG }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Read version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV

  release:
    name: Release
    needs: [sync, image-tag, summarize]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - id: extract-changelog
        uses: sean0x42/markdown-extract@v2.1.0
        with:
          file: CHANGELOG.md
          pattern: ${{ needs.image-tag.outputs.IMAGE_TAG }}

      - name: Download summary artifacts
        uses: actions/download-artifact@v4
        with:
          name: final-summary

      - name: Download summary artifacts
        uses: actions/download-artifact@v4
        with:
          name: discord-summary

      - name: Save summary into Github environment variable
        run: |
          {
            echo "SYNC_SUMMARY<<EOF"
            cat final_summary.md
            echo "EOF"
          } >> $GITHUB_ENV
           
          {
            echo "DISCORD_SUMMARY<<EOF"
            cat discord_summary.md
            echo "EOF"
          } >> $GITHUB_ENV

      - uses: ncipollo/release-action@v1
        id: create_release
        with:
          tag: ${{ env.IMAGE_NAME }}@${{ needs.image-tag.outputs.IMAGE_TAG }}
          makeLatest: true
          body: |
            ${{ steps.extract-changelog.outputs.markdown }}

            ${{ env.SYNC_SUMMARY }}
          skipIfReleaseExists: true

      - name: Check if release was created
        id: check_release
        run: |
          if [ -z "${{ steps.create_release.outputs.html_url }}" ]; then
            echo "RELEASE_SKIPPED=true" >> $GITHUB_ENV
          else
            echo "RELEASE_SKIPPED=false" >> $GITHUB_ENV
          fi

      - name: Discord notification
        if: env.RELEASE_SKIPPED == 'false'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: |
            # ${{ env.IMAGE_NAME }}@${{ needs.image-tag.outputs.IMAGE_TAG }}

            ${{ steps.extract-changelog.outputs.markdown }}

            ${{ env.DISCORD_SUMMARY }}
